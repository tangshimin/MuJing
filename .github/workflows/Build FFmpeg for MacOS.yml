name: Build FFmpeg for MacOS

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-15, macos-latest ]
        include:
          - os: macos-15
            arch: x86_64
            artifact_name: ffmpeg-macos-x86_64
          - os: macos-latest
            arch: aarch64
            artifact_name: ffmpeg-macos-aarch64

    steps:
      - name: Prepare tools & deps
        run: |
          # Use brew to install build dependencies (add cmake for whisper.cpp)
          brew update
          brew install automake libtool nasm pkg-config yasm cmake
          echo "NPROC=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV

      - name: Download FFmpeg source code
        run: |
          git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg

      - name: Clone & Build whisper.cpp (static only)
        run: |
          set -euo pipefail
          PREFIX="$GITHUB_WORKSPACE/local"
          mkdir -p "$PREFIX"
          git clone https://github.com/ggerganov/whisper.cpp.git
          cd whisper.cpp
          mkdir -p build && cd build
          
          # 根据架构设置不同的 Metal 支持选项
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            # Intel Mac: 禁用 Metal，只使用 Accelerate
            METAL_FLAG="-DGGML_METAL=OFF"
          else
            # ARM64 Mac: 启用 Metal
            METAL_FLAG="-DGGML_METAL=ON"
          fi
          
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${PREFIX}" \
                -DWHISPER_BUILD_TESTS=OFF \
                -DWHISPER_BUILD_EXAMPLES=OFF \
                -DWHISPER_BUILD_SHARED_LIB=OFF \
                -DGGML_SHARED=OFF \
                -DWHISPER_NO_ACCELERATE=OFF \
                ${METAL_FLAG} \
                -DBUILD_SHARED_LIBS=OFF \
                ..
          cmake --build . --config Release -j ${NPROC}
          cmake --install .
          
          # 验证安装
          echo "Installed static libraries:"
          find "${PREFIX}/lib" -name "*.a" | sort
          
          # 创建正确的 whisper.pc 文件（根据架构调整库列表）
          PC_FILE="${PREFIX}/lib/pkgconfig/whisper.pc"
          mkdir -p "${PREFIX}/lib/pkgconfig"
          
          # 根据架构设置不同的库依赖
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            # Intel Mac: 不包含 Metal 库
            cat > "$PC_FILE" << EOF
          prefix=${PREFIX}
          exec_prefix=\${prefix}
          libdir=\${exec_prefix}/lib
          includedir=\${prefix}/include

          Name: whisper
          Description: Port of OpenAI's Whisper model in C/C++
          Version: 1.8.0
          Libs: -L\${libdir} -lwhisper -lggml -lggml-cpu -lggml-blas -lggml-base
          Libs.private: -framework Accelerate -framework Foundation -lc++
          Cflags: -I\${includedir}
          EOF
          else
            # ARM64 Mac: 包含 Metal 库
            cat > "$PC_FILE" << EOF
          prefix=${PREFIX}
          exec_prefix=\${prefix}
          libdir=\${exec_prefix}/lib
          includedir=\${prefix}/include

          Name: whisper
          Description: Port of OpenAI's Whisper model in C/C++
          Version: 1.8.0
          Libs: -L\${libdir} -lwhisper -lggml -lggml-cpu -lggml-blas -lggml-metal -lggml-base
          Libs.private: -framework Accelerate -framework Metal -framework Foundation -lc++
          Cflags: -I\${includedir}
          EOF
          fi

      - name: Configure FFmpeg (with whisper support)
        run: |
          set -euo pipefail
          cd ffmpeg
          PREFIX="$GITHUB_WORKSPACE/local"
          export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          
          # 验证 whisper 可用
          pkg-config --exists whisper || { echo 'whisper package not found'; exit 1; }
          
          ./configure --disable-everything \
            --disable-ffprobe \
            --enable-ffmpeg \
            --enable-avutil \
            --enable-avcodec \
            --enable-avformat \
            --enable-avfilter \
            --enable-swresample \
            --enable-filter=aresample \
            --enable-filter=aformat \
            --enable-protocol=file \
            --enable-static \
            --disable-shared \
            --disable-autodetect \
            --enable-whisper \
            --enable-filter=whisper \
            --enable-decoder=srt \
            --enable-decoder=movtext \
            --enable-decoder=webvtt \
            --enable-decoder=ass \
            --enable-decoder=ssa \
            --enable-decoder=subrip \
            --enable-encoder=srt \
            --enable-encoder=subrip \
            --enable-encoder=movtext \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-demuxer=ass \
            --enable-demuxer=srt \
            --enable-demuxer=webvtt \
            --enable-muxer=srt \
            --enable-muxer=null \
            --enable-muxer=wav \
            --enable-muxer=mp3 \
            --enable-muxer=aac \
            --enable-muxer=pcm_s16le \
            --enable-demuxer=wav \
            --enable-demuxer=mp3 \
            --enable-demuxer=aac \
            --enable-encoder=pcm_s16le \
            --enable-encoder=mp3 \
            --enable-encoder=aac \
            --enable-decoder=pcm_s16le \
            --enable-decoder=mp3 \
            --enable-decoder=aac \
            --enable-decoder=flac \
            --enable-encoder=flac \
            --enable-demuxer=flac \
            --enable-muxer=flac \
            --enable-decoder=vorbis \
            --enable-encoder=vorbis \
            --enable-demuxer=ogg \
            --enable-muxer=ogg \
            --enable-decoder=opus \
            --enable-encoder=opus \
            --enable-decoder=ac3 \
            --enable-encoder=ac3 \
            --enable-decoder=eac3 \
            --enable-decoder=dts \
            --enable-decoder=truehd \
            --enable-decoder=mlp \
            --enable-decoder=mp2 \
            --enable-encoder=mp2 \
            --enable-decoder=aac_he \
            --enable-decoder=pcm_dvd \
            --enable-decoder=pcm_bluray \
            --enable-decoder=pcm_u8 \
            --enable-decoder=pcm_u16le \
            --enable-decoder=pcm_u24le \
            --enable-decoder=pcm_u32le \
            --enable-encoder=pcm_u8 \
            --enable-encoder=pcm_u16le \
            --enable-encoder=pcm_u24le \
            --enable-encoder=pcm_u32le \
            --enable-decoder=wmav1 \
            --enable-decoder=wmav2 \
            --enable-decoder=wmalossless \
            --enable-decoder=wmapro \
            --enable-decoder=wmavoice \
            --enable-demuxer=asf \
            --enable-decoder=alac \
            --enable-encoder=alac \
            --enable-demuxer=mov \
            --enable-decoder=amrnb \
            --enable-decoder=amrwb \
            --enable-demuxer=amr \
            --enable-decoder=pcm_s24le \
            --enable-decoder=pcm_s32le \
            --enable-decoder=pcm_f32le \
            --enable-decoder=pcm_f64le \
            --enable-encoder=pcm_s24le \
            --enable-encoder=pcm_s32le \
            --enable-encoder=pcm_f32le \
            --enable-encoder=pcm_f64le \
            --pkg-config-flags="--static" \
            --extra-cflags="-I${PREFIX}/include" \
            --extra-ldflags="-L${PREFIX}/lib -framework Accelerate"

      - name: Build & Install FFmpeg
        run: |
          set -euo pipefail
          cd ffmpeg
            make -j ${NPROC}
            sudo make install

      - name: Verify static linking
        run: |
          otool -L /usr/local/bin/ffmpeg || true
          file /usr/local/bin/ffmpeg || true
          /usr/local/bin/ffmpeg -hide_banner -filters | grep -i whisper || echo "Whisper filter not found"

      - name: Basic Functional Tests (codecs + whisper presence)
        run: |
          set -euo pipefail
          /usr/local/bin/ffmpeg -version
          /usr/local/bin/ffmpeg -encoders | grep -E "(srt|subrip|movtext|mp3|mp2|aac|flac|vorbis|opus|ac3|alac|pcm_s16le)" || echo "Some encoders missing"
          /usr/local/bin/ffmpeg -decoders | grep -E "(srt|movtext|webvtt|ass|ssa)" || echo "Subtitle decoders missing"
          /usr/local/bin/ffmpeg -decoders | grep -E "(mp3|mp2|aac|flac|vorbis|opus|ac3|eac3|dts|truehd|mlp|wmav1|wmav2|alac|amrnb|amrwb|pcm_s16le|pcm_dvd|pcm_bluray)" || echo "Audio decoders missing"
          /usr/local/bin/ffmpeg -formats | grep -E "(mov|matroska|srt|wav|mp3|aac|flac|ogg|asf|amr|null)" || echo "Some formats missing"
          /usr/local/bin/ffmpeg -hide_banner -filters | grep -i whisper || echo "Whisper filter missing"
          /usr/local/bin/ffmpeg -muxers | grep -E "(srt|null|wav|mp3|aac|flac|ogg|pcm_s16le)" || echo "Some muxers missing"

      - name: Upload artifact (ffmpeg binary only)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: /usr/local/bin/ffmpeg
