name: Build Package

on:
  workflow_dispatch: # Manual trigger
  push: # Tag-based trigger
    tags:
      - '*'

jobs:
  create-package:
    name: Create Package On ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, macos-15, macos-latest ]
        include:
          - os: windows-latest
            arch: x64
            name: Windows x86_64
            packageTask: light
            artifactPath: build/compose/binaries/main/app/*.msi
            artifactName: windows-package-x64
          - os: macos-15
            arch: x64
            name: macOS x86_64
            packageTask: packageDmg
            artifactPath: build/compose/binaries/main/dmg/*.dmg
            artifactName: macos-package-x64
          - os: macos-latest
            arch: aarch64
            name: macOS aarch64
            packageTask: packageDmg
            artifactPath: build/compose/binaries/main/dmg/*.dmg
            artifactName: macos-package-aarch64
    permissions:
      contents: write
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'jetbrains'
          java-version: '21'
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history
          tags: true  # Fetch all tags

      # Add execute permissions to gradlew
      - name: Set execute permissions on gradlew
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      - name: Set UTF-8 encoding for Windows
        if: runner.os == 'Windows'
        run: |
          # 设置 Gradle 的 JVM 参数，强制使用 UTF-8 编码
          # 解决 Windows 环境下中文字符显示为问号的问题
          echo "GRADLE_OPTS=-Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8" >> $env:GITHUB_ENV


      # Build Desktop Packaged application
      - name: Desktop App Package
        run: ./gradlew ${{ matrix.packageTask }}

      # Create Windows Portable version by zipping the MuJing folder
      - name: Create Windows Portable Package
        if: runner.os == 'Windows'
        run: |
          $version = "${{ github.ref_name }}"
          if ($version -eq "" -or $version -eq "refs/heads/main") {
            $version = (Get-Content gradle.properties | Select-String "version=" | ForEach-Object { $_.ToString().Split('=')[1].Trim() })
          }
          # 统一命名为 MuJing-版本号.zip
          $zipFile = "build/compose/binaries/main/app/MuJing-$version.zip"
          Write-Host "Creating portable package: $zipFile"
          Compress-Archive -Path "build/compose/binaries/main/app/MuJing/*" -DestinationPath $zipFile -Force
          Write-Host "Portable package created successfully"
          Get-Item $zipFile
        shell: pwsh

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifactName }}
          path: ${{ matrix.artifactPath }}

      - name: Upload Windows Portable Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-package-portable-x64
          path: build/compose/binaries/main/app/*.zip

  draft-release:
    name: Draft Release
    needs: create-package
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Get Tag
        id: get_tag
        run: echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Draft Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          generateReleaseNotes: false
          name: ${{ env.TAG }} # 设置 Release 的标题为 Tag 名称
          tag: ${{ env.TAG }}
          token: ${{ steps.generate-token.outputs.token }}
          body: |
            ---
            ### Windows 版本下载
            - [Windows 安装包 (MSI)](https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/MuJing-${{ env.TAG }}.msi)
            - [Windows 绿色版 (ZIP)](https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/MuJing-${{ env.TAG }}.zip)
            ### macOS 版本下载
            - [macOS x86_64 Intel 芯片(DMG)](https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/MuJing-${{ env.TAG }}-x64.dmg)
            - [macOS aarch64 M 芯片(DMG)](https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/MuJing-${{ env.TAG }}-aarch64.dmg)
          artifactErrorsFailBuild: false # 如果某个附件找不到，不要让整个 workflow 失败
          # 'assets' 字段需要是多行字符串格式
          assets: |
            artifacts/windows-package-x64/*.msi:MuJing-${{ env.TAG }}.msi
            artifacts/windows-package-portable-x64/*.zip:MuJing-${{ env.TAG }}.zip
            artifacts/macos-package-x64/*.dmg:MuJing-${{ env.TAG }}-x64.dmg
            artifacts/macos-package-aarch64/*.dmg:MuJing-${{ env.TAG }}-aarch64.dmg
