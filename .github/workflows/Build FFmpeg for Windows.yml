name: Build FFmpeg for Windows

on:
  workflow_dispatch:

jobs:
  build:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-iconv
            zip
            nasm
            mingw-w64-x86_64-cmake
            git

      - name: Download FFmpeg source
        run: |
          git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg --depth 1

      - name: Clone & Build whisper.cpp
        shell: msys2 {0}
        run: |
          set -euo pipefail
          PREFIX=/usr/local
          git clone --depth 1 https://github.com/ggerganov/whisper.cpp.git
          cd whisper.cpp
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${PREFIX}" \
                -DWHISPER_BUILD_TESTS=OFF \
                -DWHISPER_BUILD_EXAMPLES=OFF \
                -DWHISPER_BUILD_SHARED_LIB=OFF \
                -DGGML_SHARED=OFF \
                -DGGML_OPENMP=ON \
                -DWHISPER_NO_ACCELERATE=ON \
                -DBUILD_SHARED_LIBS=OFF \
                ..
          cmake --build . --config Release -j $(nproc)
          cmake --install .
          cd "${PREFIX}/lib"
          if [ -f ggml.a ] && [ ! -f libggml.a ]; then mv ggml.a libggml.a; fi
          for f in ggml-*.a; do [ -f "$f" ] && [ ! -f "lib$f" ] && mv "$f" "lib$f" || true; done
          mkdir -p "${PREFIX}/lib/pkgconfig"
          cat > "${PREFIX}/lib/pkgconfig/whisper.pc" << 'EOF'
          prefix=/usr/local
          exec_prefix=${prefix}
          libdir=${exec_prefix}/lib
          includedir=${prefix}/include

          Name: whisper
          Description: Port of OpenAI's Whisper model in C/C++
          Version: 1.8.0
          Libs: -L${libdir} -lwhisper -lggml -lggml-cpu -lggml-base -lgomp
          Libs.private: -lstdc++ -lm -lpthread -lgomp
          Cflags: -I${includedir} -fopenmp
          EOF
          cp "${PREFIX}/lib/pkgconfig/whisper.pc" "${PREFIX}/lib/pkgconfig/libwhisper.pc" || true

      - name: Configure FFmpeg
        shell: msys2 {0}
        run: |
          set -euo pipefail
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
          pkg-config --exists whisper || (echo 'whisper.pc missing' && exit 1)
          echo "whisper version: $(pkg-config --modversion whisper)"
          cat > test.c <<'EOF'
          #include <whisper.h>
          int main(void) {
              (void) whisper_init_from_file_with_params;
              return 0;
          }
          EOF
          g++ $(pkg-config --cflags whisper) test.c $(pkg-config --libs whisper) -o /tmp/t || (echo 'link fail' && exit 1)
          rm -f test.c /tmp/t
          cd ffmpeg
          ./configure --disable-everything \
            --disable-ffprobe \
            --enable-ffmpeg \
            --enable-avutil \
            --enable-avcodec \
            --enable-avformat \
            --enable-avfilter \
            --enable-swresample \
            --enable-filter=aresample \
            --enable-filter=aformat \
            --enable-protocol=file \
            --enable-static \
            --disable-shared \
            --disable-autodetect \
            --enable-whisper \
            --enable-filter=whisper \
            --enable-decoder=srt \
            --enable-decoder=movtext \
            --enable-decoder=webvtt \
            --enable-decoder=ass \
            --enable-decoder=ssa \
            --enable-decoder=subrip \
            --enable-encoder=srt \
            --enable-encoder=subrip \
            --enable-encoder=movtext \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-demuxer=ass \
            --enable-demuxer=srt \
            --enable-demuxer=webvtt \
            --enable-muxer=srt \
            --enable-muxer=null \
            --enable-muxer=wav \
            --enable-muxer=mp3 \
            --enable-muxer=aac \
            --enable-muxer=pcm_s16le \
            --enable-demuxer=wav \
            --enable-demuxer=mp3 \
            --enable-demuxer=aac \
            --enable-encoder=pcm_s16le \
            --enable-encoder=mp3 \
            --enable-encoder=aac \
            --enable-decoder=pcm_s16le \
            --enable-decoder=mp3 \
            --enable-decoder=aac \
            --enable-decoder=flac \
            --enable-encoder=flac \
            --enable-demuxer=flac \
            --enable-muxer=flac \
            --enable-decoder=vorbis \
            --enable-encoder=vorbis \
            --enable-demuxer=ogg \
            --enable-muxer=ogg \
            --enable-decoder=opus \
            --enable-encoder=opus \
            --enable-decoder=ac3 \
            --enable-encoder=ac3 \
            --enable-decoder=eac3 \
            --enable-decoder=dts \
            --enable-decoder=truehd \
            --enable-decoder=mlp \
            --enable-decoder=mp2 \
            --enable-encoder=mp2 \
            --enable-decoder=aac_he \
            --enable-decoder=pcm_dvd \
            --enable-decoder=pcm_bluray \
            --enable-decoder=pcm_u8 \
            --enable-decoder=pcm_u16le \
            --enable-decoder=pcm_u24le \
            --enable-decoder=pcm_u32le \
            --enable-encoder=pcm_u8 \
            --enable-encoder=pcm_u16le \
            --enable-encoder=pcm_u24le \
            --enable-encoder=pcm_u32le \
            --enable-decoder=wmav1 \
            --enable-decoder=wmav2 \
            --enable-decoder=wmalossless \
            --enable-decoder=wmapro \
            --enable-decoder=wmavoice \
            --enable-demuxer=asf \
            --enable-decoder=alac \
            --enable-encoder=alac \
            --enable-demuxer=mov \
            --enable-decoder=amrnb \
            --enable-decoder=amrwb \
            --enable-demuxer=amr \
            --enable-decoder=pcm_s24le \
            --enable-decoder=pcm_s32le \
            --enable-decoder=pcm_f32le \
            --enable-decoder=pcm_f64le \
            --enable-encoder=pcm_s24le \
            --enable-encoder=pcm_s32le \
            --enable-encoder=pcm_f32le \
            --enable-encoder=pcm_f64le \
            --pkg-config-flags="--static" \
            --extra-cflags="-I/usr/local/include" \
            --extra-ldflags="-L/usr/local/lib"
          make -j$(nproc)
          make install

      - name: Smoke Test
        shell: msys2 {0}
        run: |
          /usr/local/bin/ffmpeg.exe -version
          /usr/local/bin/ffmpeg.exe -hide_banner -encoders | grep -E "(srt|subrip|movtext|mp3|mp2|aac|flac|vorbis|opus|ac3|alac|pcm_s16le)" || echo "Some encoders missing"
          /usr/local/bin/ffmpeg.exe -hide_banner -decoders | grep -E "(srt|movtext|webvtt|ass|ssa)" || echo "Subtitle decoders missing"
          /usr/local/bin/ffmpeg.exe -hide_banner -decoders | grep -E "(mp3|mp2|aac|flac|vorbis|opus|ac3|eac3|dts|truehd|mlp|wmav1|wmav2|alac|amrnb|amrwb|pcm_s16le|pcm_dvd|pcm_bluray)" || echo "Audio decoders missing"
          /usr/local/bin/ffmpeg.exe -hide_banner -formats | grep -E "(mov|matroska|srt|wav|mp3|aac|flac|ogg|asf|amr|null)" || echo "Some formats missing"
          /usr/local/bin/ffmpeg.exe -hide_banner -filters | grep -i whisper || (echo 'Whisper filter missing' && exit 1)
          /usr/local/bin/ffmpeg.exe -hide_banner -muxers | grep -E "(srt|null|wav|mp3|aac|flac|ogg|pcm_s16le)" || echo "Some muxers missing"

      - name: Package Artifact
        shell: msys2 {0}
        run: |
          DEST=/usr/local/bin/ffmpeg-build
          mkdir -p "$DEST"
          cp /usr/local/bin/ffmpeg.exe "$DEST/"
          # Core runtime deps (some already mostly static but ensure presence)
          cp /mingw64/bin/libbz2-1.dll "$DEST/" || true
          cp /mingw64/bin/libiconv-2.dll "$DEST/" || true
          cp /mingw64/bin/liblzma-5.dll "$DEST/" || true
          cp /mingw64/bin/libwinpthread-1.dll "$DEST/" || true
          cp /mingw64/bin/zlib1.dll "$DEST/" || true
          # OpenMP / GCC C++ runtime dependencies
          cp /mingw64/bin/libgomp-1.dll "$DEST/" || true
          cp /mingw64/bin/libstdc++-6.dll "$DEST/" || true
          cp /mingw64/bin/libgcc_s_seh-1.dll "$DEST/" || true
          cp /mingw64/bin/libssp-0.dll "$DEST/" || true
          # Do not distribute whisper.pc â€“ not needed at runtime
          cat > "$DEST/README-whisper.txt" << 'R'
          FFmpeg + whisper filter (static build)

          This artifact contains:
            - ffmpeg.exe (linked with whisper/ggml; OpenMP enabled)
            - required runtime DLLs (C++ runtime, OpenMP, compression libs)

          The pkg-config file (whisper.pc) is NOT included because it only
          matters when compiling software against libwhisper. End users do not need it.

          Supported audio formats for Whisper transcription:
            - Common formats: MP3, AAC, WAV, FLAC
            - Professional formats: AC3/E-AC3 (Dolby Digital), DTS, Dolby TrueHD
            - Streaming formats: Opus, Vorbis (OGG), AAC-HE
            - Broadcast formats: MP2 (MPEG-1 Layer II)
            - Apple formats: ALAC (Apple Lossless), M4A
            - Microsoft formats: WMA (all variants)
            - Voice formats: AMR-NB, AMR-WB
            - PCM formats: 8/16/24/32-bit integer, 32/64-bit float
            - Specialized: DVD-Audio PCM, Blu-ray PCM

          Supported subtitle formats:
            - SRT, ASS, SSA, WebVTT, MOV Text

          Usage example:
            ffmpeg -i input.mkv -filter:a "whisper=model=ggml-tiny.en.bin:task=transcribe" -f null -

          Optional performance tuning:
            set OMP_NUM_THREADS=6   (Windows CMD)
            $env:OMP_NUM_THREADS=6  (PowerShell)

          Build optimized for US TV/Movies audio formats:
            Covers 99%+ of American video content from DVD to 4K Blu-ray,
            broadcast TV, cable TV, and all major streaming platforms.
          R

      - name: Verify Packaged FFmpeg Runs
        shell: msys2 {0}
        run: |
          DEST=/usr/local/bin/ffmpeg-build
          echo "Verifying runtime dependencies in $DEST";
          ls -1 "$DEST"
          "$DEST/ffmpeg.exe" -hide_banner -version || (echo 'Packaged ffmpeg failed to run (likely missing DLL).' && exit 1)

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-windows
          path: D:\a\_temp\msys64\usr\local\bin\ffmpeg-build
